#!/usr/bin/env python3
import datetime
import sys

try:
    import koji
except:
    print("Need to install koji:")
    print("\tRun `pip3 install koji` or in fedora: `sudo dnf install koji`")
    exit(0)

PKG_PTP_OPERATOR_BUNDLE = 73558
PKG_PTP_OPERATOR = 73187
PKG_PTP = 73233
PKG_CLOUD_EVENT_PROXY = 80283
PKG_RBAC_PROXY = 69184

IMG_TO_PKG = {"ose-ptp-operator-bundle": PKG_PTP_OPERATOR_BUNDLE,
              "ose-ptp-operator": PKG_PTP_OPERATOR,
              "ose-ptp-rhel9-operator": PKG_PTP_OPERATOR,
              "ose-ptp": PKG_PTP,
              "ose-ptp-rhel9": PKG_PTP,
              "ose-cloud-event-proxy": PKG_CLOUD_EVENT_PROXY,
              "ose-cloud-event-proxy-rhel8": PKG_CLOUD_EVENT_PROXY,
              "ose-cloud-event-proxy-rhel9": PKG_CLOUD_EVENT_PROXY,
              "ose-kube-rbac-proxy": PKG_RBAC_PROXY}

IMG_TO_REPO = {"ose-ptp-operator-bundle": "https://github.com/openshift/ptp-operator",
               "ose-ptp-operator": "https://github.com/openshift/ptp-operator",
               "ose-ptp-rhel9-operator": "https://github.com/openshift/ptp-operator",
               "ose-ptp": "https://github.com/openshift/linuxptp-daemon",
               "ose-ptp-rhel9": "https://github.com/openshift/linuxptp-daemon",
               "ose-cloud-event-proxy": "https://github.com/redhat-cne/cloud-event-proxy",
               "ose-cloud-event-proxy-rhel8": "https://github.com/redhat-cne/cloud-event-proxy",
               "ose-cloud-event-proxy-rhel9": "https://github.com/redhat-cne/cloud-event-proxy",
               "ose-kube-rbac-proxy": "https://github.com/openshift/kube-rbac-proxy"}


class Image:
    def __init__(self, data):
        self._data = data
        self.image = data["new"]
        # example: ose-cloud-event-proxy-rhel8
        self.name = self.image.split('@')[0].split('/')[-1]
        self.sha256 = self.image.split('@')[-1]
        self.updated = self._data["new"] != self._data["original"]


class Build:
    def __init__(self, build):
        self._build = build
        self._id = None
        self.name = build['name']
        self.nvr = build['nvr']
        self._commit = None
        self.package_id = build['package_id']
        self.package_name = build['package_name']
        self._release = None
        self._version = None
        self._image = None
        self.sha256 = self.image.split('@')[-1]
        self._related_images = None

    @property
    def id(self):
        if self._id is None:
            if self._build.get("build_id") is not None:
                self._id = self._build["build_id"]
            else:
                self._id = self._build['id']
        return self._id

    @property
    def commit(self):
        if self._commit is None:
            assembly_index = self.nvr.find("assembly")
            self._commit = self.nvr[:assembly_index].split('.')[-2][1:]
        return self._commit

    @property
    def image(self):
        if self._image is None:
            if self._build.get("extra") is not None:
                self._image = self._build["extra"]["image"]["index"]["pull"][0]
            else:
                self._image = ""
        return self._image

    @property
    def version(self):
        if self._version is None:
            if self.package_id == PKG_PTP_OPERATOR_BUNDLE:
                self._version = '.'.join(self._build["version"].split('.')[:3])
            else:
                self._version = self._build['version']
        return self._version

    @property
    def release(self):
        if self._release is None:
            if self.package_id == PKG_PTP_OPERATOR_BUNDLE:
                self._release = '.'.join(self._build["version"].split('.')[3:])
            else:
                self._release = self._build['release']
        return self._release

    @property
    def related_images(self):
        if self._related_images is None:
            if self._build["extra"]["image"].get("operator_manifests") is not None:
                imgs = self._build["extra"]["image"][
                    "operator_manifests"]["related_images"]["pullspecs"]
                self._related_images = []
                for i in imgs:
                    self._related_images.append(Image(i))
            else:
                self._related_images = []
        return self._related_images


def main():

    if len(sys.argv) < 2:
        print("Usage: latte <nvr or build-id>")
        print("Example: latte ose-ptp-operator-metadata-container-v4.15.0.202311290506.p0.gefb34f0.assembly.stream-1")
        print("Example: latte 2799521")
        exit(0)

    build_info = sys.argv[1]

    session = koji.ClientSession(
        "https://brewhub.engineering.redhat.com/brewhub")

    build = None
    try:
        build_id = int(build_info)
        build = Build(session.getBuild(build_id))
    except ValueError:
        build = Build(session.getBuild(build_info))

    if build is None:
        print("build not found")
        return

    queryOpts = {'order_by': ['-completion_time'], 'limit': 50}

    # Filter builds by date
    today = datetime.datetime.now()
    last_week = today - datetime.timedelta(days=21)
    last_week_iso = last_week.strftime('%Y-%m-%d %H:%M:%S')

    for img in build.related_images:
        builds = session.listBuilds(
            # state=1 means BUILD_STATES = COMPLETE
            packageID=IMG_TO_PKG[img.name], state=1, completeAfter=last_week_iso, queryOpts=queryOpts)
        for b in builds:
            bb = Build(b)
            if img.sha256 == bb.sha256:
                print(f"\nfound related build {bb.nvr}")
                print(f" image : {img.name}@{bb.sha256}")
                print(f" commit: {IMG_TO_REPO[img.name]}/commit/{bb.commit}")
                break
    print()


if __name__ == "__main__":
    main()
